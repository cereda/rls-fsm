package org.rls.fsm

import com.tinder.StateMachine

sealed class State {
    object S0 : State()
    object S1 : State()
    object S2 : State()
    object S3 : State()
    object S4 : State()
    object S5 : State()
    object S6 : State()
    object S7 : State()
    object S8 : State()
    object S9 : State()
    object S10 : State()
    object S11 : State()
    object S12 : State()
    object S13 : State()
    object S14 : State()
    object S15 : State()
    object S16 : State()
    object S17 : State()
    object S18 : State()
    object S19 : State()
    object S20 : State()
    object S21 : State()

}

sealed class Event {
    object E0 : Event()
    object E1 : Event()
    object E2 : Event()
    object E3 : Event()
    object E4 : Event()
    object E5 : Event()
    object E6 : Event()
    object E7 : Event()
    object E8 : Event()
    object E9 : Event()
    object E10 : Event()
    object E11 : Event()
    object E12 : Event()
    object E13 : Event()
    object E14 : Event()
    object E15 : Event()
    object E16 : Event()
    object E17 : Event()
    object E18 : Event()
    object E19 : Event()
    object E20 : Event()
    object E21 : Event()
    object E22 : Event()
    object E23 : Event()
    object E24 : Event()
    object E25 : Event()
    object E26 : Event()
    object E27 : Event()
    object E28 : Event()
}

sealed class SideEffect {
    object NopEffect : SideEffect()

}

val groups = mapOf(
    1 to setOf(
        State.S0,State.S1, State.S2, State.S3, State.S4, State.S5, State.S6,
        State.S7, State.S8, State.S9, State.S10, State.S11, State.S12,State.S13,
        State.S14, State.S15,State.S16, State.S17, State.S18,State.S19, State.S20, State.S21
    )
)

val transitions = mapOf(
    (State.S0 to Event.E0) to State.S1,
    (State.S1 to Event.E1) to State.S2,
    (State.S1 to Event.E6) to State.S5,
    (State.S2 to Event.E2) to State.S3,
    (State.S2 to Event.E3) to State.S21,
    (State.S3 to Event.E4) to State.S4,
    (State.S4 to Event.E5) to State.S1,
    (State.S5 to Event.E8) to State.S6,
    (State.S5 to Event.E7) to State.S7,
    (State.S7 to Event.E10) to State.S8,
    (State.S7 to Event.E9) to State.S9,
    (State.S8 to Event.E11) to State.S21,
    (State.S9 to Event.E12) to State.S10,
    (State.S9 to Event.E17) to State.S13,
    (State.S10 to Event.E13) to State.S21,
    (State.S10 to Event.E14) to State.S11,
    (State.S11 to Event.E15) to State.S12,
    (State.S12 to Event.E16) to State.S9,
    (State.S13 to Event.E23) to State.S17,
    (State.S13 to Event.E18) to State.S14,
    (State.S13 to Event.E28) to State.S20,
    (State.S14 to Event.E19) to State.S15,
    (State.S15 to Event.E21) to State.S16,
    (State.S16 to Event.E22) to State.S13,
    (State.S15 to Event.E20) to State.S21,
    (State.S17 to Event.E24) to State.S18,
    (State.S18 to Event.E26) to State.S19,
    (State.S19 to Event.E27) to State.S13,
    (State.S18 to Event.E25) to State.S21,
)

val activeGroups = mutableSetOf(1)

fun build(): StateMachine<State, Event, SideEffect> {
    return generateMachine(State.S0)
}

fun step(
    currentMachine: StateMachine<State, Event, SideEffect>,
    currentEvent: Event
): StateMachine<State, Event, SideEffect> {

    val currentState = currentMachine.state
    println("Current state: $currentState")
    activeGroups.add(transitions[currentState to currentEvent]?.let {
        groups.filter { p -> it in p.value }.keys.firstOrNull() ?: 1
    } ?: 1)

    return generateMachine(currentState)
}

private fun generateMachine(currentState: State): StateMachine<State, Event, SideEffect> {
    val states = activeGroups.flatMap { groups[it]!! }

    val machine = StateMachine.create<State, Event, SideEffect> {
        initialState(currentState)

        states.forEach { s ->
            state(s) {
                transitions.filter { k -> k.key.first == s }
                    .forEach { (k, v) -> on(k.second) { transitionTo(v, SideEffect.NopEffect) } }
            }
        }
    }
    return machine
}

fun walk(
    currentMachine: StateMachine<State, Event, SideEffect>,
    currentEvent: Event
): StateMachine<State, Event, SideEffect> {
    val machine = step(currentMachine, currentEvent)
    machine.transition(currentEvent)
    return machine
}

fun main() {
    val events = listOf(Event.E0,Event.E1,Event.E2,Event.E4,Event.E5,Event.E6,Event.E8) //Test01: Execution reached a satisfied requirement state.
    //Test02: val events = listOf(Event.E0,Event.E6,Event.E7,Event.E10,Event.E11) //Execution reached an unsatisfied requirement state.
    //Test03: val events = listOf(Event.E0,Event.E6,Event.E7)//Something wrong happened.
    val fsm = events.fold(build()) { x, y -> walk(x, y) }
    if (fsm.state in setOf(State.S6, State.S20)) {
        println("Execution reached a satisfied requirement state.")
    } else if (fsm.state in setOf(State.S21)){
        println("Execution reached an unsatisfied requirement state.")
    }
    else {
        println("Something wrong happened.")
    }
}
